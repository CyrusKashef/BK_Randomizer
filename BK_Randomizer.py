'''
Created on Mar 1, 2021

@author: Cyrus Kashef (aka GiantJigglypuff3)
'''

### TODO ###
# 1) Create a "Save Rom As" to prevent creating an extra rom
# 2) Possible option to remove unkillable enemies from completely randomized

###########################################################################
################################# IMPORTS #################################
###########################################################################

import mmap
import random
import os
import shutil
import tkinter.filedialog
import tkinter as tk
import logging
from logging.handlers import RotatingFileHandler
import binascii

#####################################################################################
##################################### VARIABLES #####################################
#####################################################################################

tmp_folder = "EPPIIISA/"

logger = logging.getLogger("Rotating Log")
logger.setLevel(logging.DEBUG)
FORMAT = '[%(levelname)s] %(asctime)-15s - %(funcName)s: %(message)s'
# USER LOGGER
handler = RotatingFileHandler(os.getcwd() + "\Randomizer_Log_File.log", maxBytes=(512*1024), backupCount=0)
logger.addHandler(handler)
# DEV LOGGER
logging.basicConfig(format=FORMAT)

default_options = {
    "Rom": os.getcwd(),
    "Non-Flag": "2",
    "Flagged": "1",
    "Struct": "2",
    "Enemies": "2",
    }

#############################################################################################
####################################### SETUP ID LIST #######################################
#############################################################################################

setup_ids = {
    # Setup Location
        # Setup Address
        # Header -> First set of characters in the compressed file needed to decompress the setup
        #           "1F 8B 08 08 E7 6F 67 60 00 0B" is the header needed to decompress every Banjo-Kazooie setup, though I was experimenting and it looks like some of the values don't matter?
        #           The next 6 digits are the hex values for the ascii name of the file derived from the index that the setup starts at (example spiral mountain goes from ascii "9780" to hex "39 37 38 30")
        #           "2D 44 65 63 6F 6D 70 72 65 73 73 65 64 2E 62 69 6E 00" is hex for "-Compressed.bin"
        # Footer -> GEDecompressor decompressed file's compressed characters that are different from the default compressed footer
        #           Not sure how this is generated
        # Lead -> Compressed file's original header (grab first 6 hex from rom)
        #         Starts with "11 72 00 00" with two extra hex values that indicate how many bytes are in the decompressed version of the file
        # Tail -> Compressed file's original footer
        #         Grab the trailing AAs from the rom
        #         I believe these are just empty spaces/padding that don't really matter as long as you provide the correct lead
    "Spiral Mountain": [
        ("0x9780", # Main Area - 4C4680
            ['1F', '8B', '08', '08', '3E', 'FE', '6B', '60', '00', '0B', '39', '37', '38', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["F5", "0F", "4E", "05", "A0", "26", "00", "00"],
            ['11', '72', '00', '00', '26', 'A0'],
            ['AA', 'AA', 'AA'],
            ),
        ],
    "Mumbo's Mountain": [
        ("0x9788", # Main Area - 4C5A30
            ['1F', '8B', '08', '08', '37', 'FC', '6B', '60', '00', '0B', '39', '37', '38', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["07", "D0", "9F", "9C", "10", "39", "00", "00"],
            ["11", "72", "00", "00", "39", "10"],
            []
            ),
        ("0x97D8", # Ticker's Tower - 4CCD40
            ['1F', '8B', '08', '08', '37', 'FC', '6B', '60', '00', '0B', '39', '37', '44', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["09", "CE", "33", "CD", "97", "07", "00", "00"],
            ["11", "72", "00", "00", "07", "97"],
            ["AA", "AA", "AA", "AA"]
            ),
        ("0x97E8", # Mumbo's Skull - 4CF158
            ['1F', '8B', '08', '08', '37', 'FC', '6B', '60', '00', '0B', '39', '37', '45', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["57", "06", "86", "0A", "1B", "04", "00", "00"],
            ["11", "72", "00", "00", "04", "1B"],
            ["AA", "AA", "AA", "AA"]
            ),
        ],
    "Treasure Trove Cove":[
        ("0x97B0", # Main Area - 4C7FD8
            ['1F', '8B', '08', '08', 'B5', '01', '6B', '60', '00', '0B', '39', '37', '42', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["F8", "F9", "1A", "71", "A6", "54", "00", "00"],
            ["11", "72", "00", "00", "54", "A6"],
            ["AA", "AA", "AA"]
            ),
        ("0x97A0", # Blubber's Ship - 4C7918
            ['1F', '8B', '08', '08', 'B5', '01', '6B', '60', '00', '0B', '39', '37', '41', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["3A", "BE", "F3", "F9", "28", "05", "00", "00"],
            ["11", "72", "00", "00", "05", "28"],
            ["AA"]
            ),
        ("0x97A8", # Nipper's Shell - 4C7C38
            ['1F', '8B', '08', '08', 'B5', '01', '6B', '60', '00', '0B', '39', '37', '41', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["82", "74", "6F", "6D", "1D", "06", "00", "00"],
            ["11", "72", "00", "00", "06", "1D"],
            ["AA", "AA", "AA", "AA"]
            ),
        ("0x97C8", # Sandcastle - 4CAD60
            ['1F', '8B', '08', '08', 'B5', '01', '6B', '60', '00', '0B', '39', '37', '43', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["1B", "59", "AD", "BE", "97", "04", "00", "00"],
            ["11", "72", "00", "00", "04", "97"],
            ["AA", "AA", "AA", "AA", "AA", "AA"]
            ),
        ],
    "Clanker's Cavern": [
        ("0x97D0", # Main Area - 4CB028
            ['1F', '8B', '08', '08', '45', '6A', '6B', '60', '00', '0B', '39', '37', '44', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["BE", "C8", "0F", "88", "08", "3B", "00", "00"],
            ["11", "72", "00", "00", "3B", "08"],
            ["AA", "AA", "AA", "AA"]
            ),
        ("0x9888", # Inside Clanker Mouth And Belly - 4D95E0
            ['1F', '8B', '08', '08', '45', '6A', '6B', '60', '00', '0B', '39', '38', '38', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["FF", "51", "5D", "EA", "D3", "16", "00", "00"],
            ["11", "72", "00", "00", "16", "D3"],
            ["AA"]
            ),
        ("0x9880", # Inside Clanker Blowhole Entrance - 4D91C8
            ['1F', '8B', '08', '08', '45', '6A', '6B', '60', '00', '0B', '39', '38', '38', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["7A", "D4", "1E", "70", "CA", "07", "00", "00"],
            ["11", "72", "00", "00", "07", "CA"],
            ["AA", "AA", "AA", "AA"]
            ),
        ("0x9890", # Inside Clanker Gold Feather Room - 4DA1B8
            ['1F', '8B', '08', '08', '45', '6A', '6B', '60', '00', '0B', '39', '38', '39', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["6E", "95", "E4", "1C", "B7", "04", "00", "00"],
            ["11", "72", "00", "00", "04", "B7"],
            ["AA", "AA", "AA", "AA"]
            ),
        ],
    "Bubblegloop Swamp": [
        ("0x97E0", # Main Area - 4CD1E8
            ['1F', '8B', '08', '08', '23', '32', '6B', '60', '00', '0B', '39', '37', '45', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["E1", "B8", "9D", "0B", "7B", "3B", "00", "00"],
            ["11", "72", "00", "00", "3B", "7B"],
            ["AA", "AA", "AA", "AA", "AA", "AA", "AA"]
            ),
        ("0x97F8", # Mr Vile - 4CF410
            ['1F', '8B', '08', '08', '23', '32', '6B', '60', '00', '0B', '39', '37', '46', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["AB", "24", "EE", "F7", "FB", "09", "00", "00"],
            ["11", "72", "00", "00", "09", "FB"],
            ["AA", "AA", "AA", "AA"]
            ),
        ("0x9800", # TipTup Choir - 4CF990
            ['1F', '8B', '08', '08', '23', '32', '6B', '60', '00', '0B', '39', '38', '30', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["3E", "00", "7C", "A7", "35", "07", "00", "00"],
            ["11", "72", "00", "00", "07", "35"],
            ["AA", "AA"]
            ),
        ("0x99B0", # Mumbo's Skull - 4E9F00
            ['1F', '8B', '08', '08', '23', '32', '6B', '60', '00', '0B', '39', '39', '42', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["59", "04", "85", "77", "CF", "03", "00", "00"],
            ["11", "72", "00", "00", "03", "CF"],
            ["AA", "AA", "AA", "AA", "AA"]
            ),
        ],
    "Freezeezy Peak": [
        ("0x98B0", # Main Area - 4DB118
            ['1F', '8B', '08', '08', '9C', '36', '6B', '60', '00', '0B', '39', '38', '42', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["A4", "F1", "32", "D8", "14", "5E", "00", "00"],
            ["11", "72", "00", "00", "5E", "14"],
            ["AA", "AA", "AA", "AA"]
            ),
        ("0x9980", # Boggy's Igloo - 4E4820
            ['1F', '8B', '08', '08', '9C', '36', '6B', '60', '00', '0B', '39', '39', '38', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["68", "7A", "BA", "AD", "E0", "03", "00", "00"],
            ["11", "72", "00", "00", "03", "E0"],
            ["AA", "AA", "AA"]
            ),
        ("0x99B8", # Mumbo's Skull - 4EA168
            ['1F', '8B', '08', '08', '9C', '36', '6B', '60', '00', '0B', '39', '39', '42', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["83", "67", "E8", "E6", "97", "03", "00", "00"],
            ["11", "72", "00", "00", "03", "97"],
            []
            ),
        ("0x9A10", # Inside The Tree - 4EACA8
            ['1F', '8B', '08', '08', '9C', '36', '6B', '60', '00', '0B', '39', '41', '31', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["61", "23", "35", "7A", "6C", "0B", "00", "00"],
            ["11", "72", "00", "00", "0B", "6C"],
            ["AA", "AA", "AA", "AA", "AA", "AA"]
            ),
        ("0x9B70", # Wozza's Cave - 4F6088
            ['1F', '8B', '08', '08', '9C', '36', '6B', '60', '00', '0B', '39', '42', '37', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["4A", "63", "11", "A3", "99", "0B", "00", "00"],
            ["11", "72", "00", "00", "0B", "99"],
            ["AA", "AA", "AA", "AA", "AA", "AA", "AA"]
            ),
        ],
    "Gobi's Valley": [
        ("0x9808", # Main Area - 4CFDF0
            ['1F', '8B', '08', '08', 'AF', '39', '6B', '60', '00', '0B', '39', '38', '30', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["6C", "9D", "63", "95", "D4", "47", "00", "00"],
            ["11", "72", "00", "00", "47", "D4"],
            []
            ),
        ("0x9810", # Puzzle Room - 4D2450
            ['1F', '8B', '08', '08', 'AF', '39', '6B', '60', '00', '0B', '39', '38', '31', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["C0", "39", "07", "9B", "F0", "04", "00", "00"],
            ["11", "72", "00", "00", "04", "F0"],
            ["AA", "AA", "AA"]
            ),
        ("0x9818", # King Sandybutt's Tomb - 4D2778
            ['1F', '8B', '08', '08', 'AF', '39', '6B', '60', '00', '0B', '39', '38', '31', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["82", "69", "5D", "2F", "35", "19", "00", "00"],
            ["11", "72", "00", "00", "19", "35"],
            ["AA", "AA", "AA", "AA", "AA", "AA"]
            ),
        ("0x9820", # Water Room - 4D3630
            ['1F', '8B', '08', '08', 'AF', '39', '6B', '60', '00', '0B', '39', '38', '32', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["95", "83", "F2", "B6", "F7", "06", "00", "00"],
            ["11", "72", "00", "00", "06", "F7"],
            ["AA", "AA"]
            ),
        ("0x9828", # Rupee - 4D3A40
            ['1F', '8B', '08', '08', 'AF', '39', '6B', '60', '00', '0B', '39', '38', '32', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["31", "6C", "24", "10", "F1", "07", "00", "00"],
            ["11", "72", "00", "00", "07", "F1"],
            ["AA"]
            ),
        ("0x9848", # Jinxy - 4D3F38
            ['1F', '8B', '08', '08', 'AF', '39', '6B', '60', '00', '0B', '39', '38', '34', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["59", "86", "A9", "76", "32", "09", "00", "00"],
            ["11", "72", "00", "00", "09", "32"],
            ["AA", "AA", "AA", "AA", "AA"]
            ),
        ],
    "Mad Monster Mansion": [
        ("0x9850", # Main Area - 4D44D8
            ['1F', '8B', '08', '08', '84', '3F', '6B', '60', '00', '0B', '39', '38', '35', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["A9", "19", "C5", "C7", "51", "45", "00", "00"],
            ["11", "72", "00", "00", "45", "51"],
            ["AA", "AA", "AA", "AA"]
            ),
        ("0x9BE0", # Septic Tank (Inside Loggo) - 4FA110
            ['1F', '8B', '08', '08', '84', '3F', '6B', '60', '00', '0B', '39', '42', '45', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["59", "92", "50", "A6", "F9", "03", "00", "00"],
            ["11", "72", "00", "00", "03", "F9"],
            ["AA", "AA", "AA", "AA"]
            ),
        ("0x9858", # Church - 4D6988
            ['1F', '8B', '08', '08', '84', '3F', '6B', '60', '00', '0B', '39', '38', '35', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["5C", "69", "C7", "2D", "A2", "13", "00", "00"],
            ["11", "72", "00", "00", "13", "A2"],
            []
            ),
        ("0x9860", # Cellar - 4D7358
            ['1F', '8B', '08', '08', '84', '3F', '6B', '60', '00', '0B', '39', '38', '36', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["69", "27", "0D", "8A", "9C", "09", "00", "00"],
            ["11", "72", "00", "00", "09", "9C"],
            ["AA", "AA", "AA", "AA", "AA"]
            ),
        ("0x9898", # Tumblar's Shed - 4DA480
            ['1F', '8B', '08', '08', '84', '3F', '6B', '60', '00', '0B', '39', '38', '39', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["86", "BA", "A3", "B4", "3C", "08", "00", "00"],
            ["11", "72", "00", "00", "08", "3C"],
            ["AA", "AA", "AA"]
            ),
        ("0x98A0", # Well - 4DA8E0
            ['1F', '8B', '08', '08', '84', '3F', '6B', '60', '00', '0B', '39', '38', '41', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["6D", "6D", "C3", "EC", "12", "06", "00", "00"],
            ["11", "72", "00", "00", "06", "12"],
            ["AA", "AA", "AA", "AA"]
            ),
        ("0x98A8", # Dining Room - 4DAC80
            ['1F', '8B', '08', '08', '84', '3F', '6B', '60', '00', '0B', '39', '38', '41', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["14", "D7", "09", "DC", "4B", "07", "00", "00"],
            ["11", "72", "00", "00", "07", "4B"],
            []
            ),
        ("0x98B8", # Egg Room - 4DE0E8
            ['1F', '8B', '08', '08', '84', '3F', '6B', '60', '00', '0B', '39', '38', '42', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["1D", "14", "90", "02", "0C", "03", "00", "00"],
            ["11", "72", "00", "00", "03", "0C"],
            ["AA", "AA", "AA"]
            ),
        ("0x98C0", # Note Room - 4DE300
            ['1F', '8B', '08', '08', '84', '3F', '6B', '60', '00', '0B', '39', '38', '43', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["69", "0C", "75", "58", "E0", "02", "00", "00"],
            ["11", "72", "00", "00", "02", "E0"],
            ["AA", "AA", "AA"]
            ),
        ("0x98C8", # Red Feather Room - 4DE4F0
            ['1F', '8B', '08', '08', '84', '3F', '6B', '60', '00', '0B', '39', '38', '43', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["54", "E8", "C1", "C6", "70", "04", "00", "00"],
            ["11", "72", "00", "00", "04", "70"],
            ["AA", "AA", "AA", "AA", "AA", "AA", "AA"]
            ),
        ("0x98D0", # Secret Church Room - 4DE790
            ['1F', '8B', '08', '08', '84', '3F', '6B', '60', '00', '0B', '39', '38', '44', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["0F", "E7", "C6", "4B", "BD", "04", "00", "00"],
            ["11", "72", "00", "00", "04", "BD"],
            ["AA", "AA", "AA", "AA", "AA", "AA", "AA"]
            ),
        ("0x98D8", # Bathroom - 4DEA80
            ['1F', '8B', '08', '08', '84', '3F', '6B', '60', '00', '0B', '39', '38', '44', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["CF", "1E", "88", "35", "D6", "03", "00", "00"],
            ["11", "72", "00", "00", "03", "D6"],
            ["AA", "AA", "AA", "AA", "AA", "AA", "AA"]
            ),
        ("0x98E0", # Bedroom - 4DED00
            ['1F', '8B', '08', '08', '84', '3F', '6B', '60', '00', '0B', '39', '38', '45', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["C3", "51", "F0", "FF", "67", "06", "00", "00"],
            ["11", "72", "00", "00", "06", "67"],
            ["AA", "AA", "AA", "AA"]
            ),
        ("0x98E8", # Gold Feather Room - 4DF0C0
            ['1F', '8B', '08', '08', '84', '3F', '6B', '60', '00', '0B', '39', '38', '45', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["D8", "CC", "7D", "83", "D1", "02", "00", "00"],
            ["11", "72", "00", "00", "02", "D1"],
            ["AA", "AA"]
            ),
        ("0x98F0", # Drain Pipe - 4DF290
            ['1F', '8B', '08', '08', '84', '3F', '6B', '60', '00', '0B', '39', '38', '46', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["D0", "4E", "C5", "5D", "E1", "01", "00", "00"],
            ["11", "72", "00", "00", "01", "E1"],
            ["AA", "AA"]
            ),
        ("0x98F8", # Mumbo's Skull - 4DF3E0
            ['1F', '8B', '08', '08', '84', '3F', '6B', '60', '00', '0B', '39', '38', '46', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["B2", "EE", "B9", "7E", "2A", "04", "00", "00"],
            ["11", "72", "00", "00", "04", "2A"],
            ["AA", "AA"]
            ),
        ],
    "Rusty Bucket Bay": [
        ("0x9900", # Main Area - 4DF660
            ['1F', '8B', '08', '08', '42', '6C', '6B', '60', '00', '0B', '39', '39', '30', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["18", "53", "DC", "59", "E2", "3B", "00", "00"],
            ["11", "72", "00", "00", "3B", "E2"],
            ["AA", "AA", "AA", "AA", "AA", "AA"]
            ),
        ("0x9BD0", # Anchor Room - 4F9A08
            ['1F', '8B', '08', '08', '42', '6C', '6B', '60', '00', '0B', '39', '42', '44', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["5C", "B3", "37", "8F", "F0", "06", "00", "00"],
            ["11", "72", "00", "00", "06", "F0"],
            ["AA", "AA", "AA", "AA"]
            ),
        ("0x9918", # Machine (Engine) Room - 4E13D8
            ['1F', '8B', '08', '08', '42', '6C', '6B', '60', '00', '0B', '39', '39', '31', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["6A", "CF", "48", "85", "E5", "16", "00", "00"],
            ["11", "72", "00", "00", "16", "E5"],
            ["AA", "AA", "AA", "AA", "AA", "AA", "AA"]
            ),
        ("0x9920", # Big Fish Warehouse - 4E1F50
            ['1F', '8B', '08', '08', '42', '6C', '6B', '60', '00', '0B', '39', '39', '32', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["D9", "FB", "4E", "94", "76", "08", "00", "00"],
            ["11", "72", "00", "00", "08", "76"],
            ["AA"]
            ),
        ("0x9928", # Boat Room - 4E2440
            ['1F', '8B', '08', '08', '42', '6C', '6B', '60', '00', '0B', '39', '39', '32', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["F5", "2C", "9F", "54", "53", "04", "00", "00"],
            ["11", "72", "00", "00", "04", "53"],
            ["AA", "AA", "AA", "AA"]
            ),
        ("0x9930", # First Blue Container (Chompas) - 4E26D8
            ['1F', '8B', '08', '08', '42', '6C', '6B', '60', '00', '0B', '39', '39', '33', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["D7", "4B", "9B", "8C", "0D", "05", "00", "00"],
            ["11", "72", "00", "00", "05", "0D"],
            ["AA"]
            ),
        ("0x9938", # Third Blue Container (Mini Kabooms) - 4E29C8
            ['1F', '8B', '08', '08', '42', '6C', '6B', '60', '00', '0B', '39', '39', '33', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["6C", "5B", "0C", "D9", "E9", "03", "00", "00"],
            ["11", "72", "00", "00", "03", "E9"],
            ["AA", "AA", "AA", "AA", "AA", "AA", "AA"]
            ),
        ("0x9940", # Sea-Grublin's Cabin - 4E2C48
            ['1F', '8B', '08', '08', '42', '6C', '6B', '60', '00', '0B', '39', '39', '34', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["06", "4C", "8D", "44", "88", "04", "00", "00"],
            ["11", "72", "00", "00", "04", "88"],
            ["AA", "AA", "AA"]
            ),
        ("0x9948", # Kaboom's Room - 4E2ED8
            ['1F', '8B', '08', '08', '42', '6C', '6B', '60', '00', '0B', '39', '39', '34', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["6D", "C0", "63", "18", "02", "06", "00", "00"],
            ["11", "72", "00", "00", "06", "02"],
            ["AA", "AA", "AA", "AA", "AA", "AA", "AA"]
            ),
        ("0x9950", # Mini Kaboom's Room (Pipe) - 4E3238
            ['1F', '8B', '08', '08', '42', '6C', '6B', '60', '00', '0B', '39', '39', '35', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["83", "2F", "82", "83", "FA", "05", "00", "00"],
            ["11", "72", "00", "00", "05", "FA"],
            ["AA", "AA", "AA", "AA"]
            ),
        ("0x9958", # Kitchen - 4E35D0
            ['1F', '8B', '08', '08', '42', '6C', '6B', '60', '00', '0B', '39', '39', '35', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["0D", "B9", "58", "EF", "A8", "05", "00", "00"],
            ["11", "72", "00", "00", "05", "A8"],
            ["AA", "AA", "AA", "AA", "AA"]
            ),
        ("0x9960", # Navigation Room - 4E3948
            ['1F', '8B', '08', '08', '42', '6C', '6B', '60', '00', '0B', '39', '39', '36', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["74", "13", "AA", "2B", "AA", "06", "00", "00"],
            ["11", "72", "00", "00", "06", "AA"],
            ["AA", "AA", "AA", "AA", "AA"]
            ),
        ("0x9968", # Second Blue Container (Sea-Grublins) - 4E3D30
            ['1F', '8B', '08', '08', '42', '6C', '6B', '60', '00', '0B', '39', '39', '36', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["1E", "CB", "BD", "50", "37", "05", "00", "00"],
            ["11", "72", "00", "00", "05", "37"],
            ["AA", "AA"]
            ),
        ("0x9970", # Captain's Room - 4E4060
            ['1F', '8B', '08', '08', '42', '6C', '6B', '60', '00', '0B', '39', '39', '37', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["21", "71", "D2", "07", "56", "03", "00", "00"],
            ["11", "72", "00", "00", "03", "56"],
            ["AA", "AA", "AA", "AA"]
            ),
        ],
    "Click Clock Wood - Lobby": [
        ("0x9978", # Main Area - 4E4290
            ['1F', '8B', '08', '08', '27', 'FC', '6B', '60', '00', '0B', '39', '39', '37', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["A5", "B3", "9E", "EE", "33", "0B", "00", "00"],
            ["11", "72", "00", "00", "0B", "33"],
            ["AA"]
            ),
        ],
    "Click Clock Wood - Spring": [
        ("0x9990", # Spring Main Area - 4E4AA8
            ['1F', '8B', '08', '08', '27', 'FC', '6B', '60', '00', '0B', '39', '39', '39', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["32", "27", "4F", "9E", "56", "28", "00", "00"],
            ["11", "72", "00", "00", "28", "56"],
            []
            ),
        ("0x99C8", # Mumbo Skull Spring - 4EA3A8
            ['1F', '8B', '08', '08', '27', 'FC', '6B', '60', '00', '0B', '39', '39', '43', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["A9", "76", "AB", "72", "A7", "03", "00", "00"],
            ["11", "72", "00", "00", "03", "A7"],
            ["AA"]
            ),
        ("0x9A50", # Beehive Spring - 4EB538
            ['1F', '8B', '08', '08', '27', 'FC', '6B', '60', '00', '0B', '39', '41', '35', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["05", "BB", "08", "CA", "7A", "06", "00", "00"],
            ["11", "72", "00", "00", "06", "7A"],
            ["AA", "AA", "AA", "AA"]
            ),
        ("0x9A68", # Nabnut's House Spring - 4EBB50
            ['1F', '8B', '08', '08', '27', 'FC', '6B', '60', '00', '0B', '39', '41', '36', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["BA", "18", "DE", "E4", "A1", "02", "00", "00"],
            ["11", "72", "00", "00", "02", "A1"],
            ["AA"]
            ),
        ("0x9AA0", # Whipcrack Room Spring - 4EC748
            ['1F', '8B', '08', '08', '27', 'FC', '6B', '60', '00', '0B', '39', '41', '41', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["C2", "66", "18", "56", "03", "05", "00", "00"],
            ["11", "72", "00", "00", "05", "03"],
            ["AA", "AA", "AA", "AA", "AA", "AA"]
            ),
        ],
    "Click Clock Wood - Summer": [
        ("0x9998", # Summer Main Area - 4E5B98
            ['1F', '8B', '08', '08', 'D6', '0D', '6B', '60', '00', '0B', '39', '39', '39', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["5E", "1D", "C1", "C7", "80", "32", "00", "00"],
            ["11", "72", "00", "00", "32", "80"],
            ["AA", "AA", "AA", "AA", "AA"]
            ),
        ("0x99D0", # Mumbo Skull Summer - 4EA5E8
            ['1F', '8B', '08', '08', 'D6', '0D', '6B', '60', '00', '0B', '39', '39', '44', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["A4", "FC", "6A", "F1", "40", "03", "00", "00"],
            ["11", "72", "00", "00", "03", "40"],
            ["AA", "AA"]
            ),
        ("0x9A48", # Beehive Summer - 4EB258
            ['1F', '8B', '08', '08', 'D6', '0D', '6B', '60', '00', '0B', '39', '41', '34', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["05", "9F", "AF", "92", "D6", "05", "00", "00"],
            ["11", "72", "00", "00", "05", "D6"],
            ["AA", "AA", "AA", "AA", "AA", "AA"]
            ),
        ("0x9A70", # Nabnut's House Summer - 4EBD18
            ['1F', '8B', '08', '08', 'D6', '0D', '6B', '60', '00', '0B', '39', '41', '37', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["4F", "3D", "EE", "65", "9D", "02", "00", "00"],
            ["11", "72", "00", "00", "02", "9D"],
            ["AA", "AA", "AA", "AA", "AA"]
            ),
        ("0x9AA8", # Whipcrack Room Summer - 4EC9D8
            ['1F', '8B', '08', '08', 'D6', '0D', '6B', '60', '00', '0B', '39', '41', '41', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["18", "31", "7A", "E7", "CE", "04", "00", "00"],
            ["11", "72", "00", "00", "04", "CE"],
            ["AA", "AA"]
            ),
        ],
    "Click Clock Wood - Fall": [
        ("0x99A0", # Fall Main Area - 4E73B0
            ['1F', '8B', '08', '08', '31', '11', '6B', '60', '00', '0B', '39', '39', '41', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["A7", "08", "30", "AB", "38", "33", "00", "00"],
            ["11", "72", "00", "00", "33", "38"],
            ["AA", "AA", "AA", "AA", "AA", "AA"]
            ),
        ("0x99D8", # Mumbo Skull Fall - 4EA7D8
            ['1F', '8B', '08', '08', '31', '11', '6B', '60', '00', '0B', '39', '39', '44', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["4D", "04", "4B", "FC", "A7", "03", "00", "00"],
            ["11", "72", "00", "00", "03", "A7"],
            ["AA", "AA", "AA", "AA", "AA", "AA"]
            ),
        ("0x9A58", # Beehive Fall - 4EB880
            ['1F', '8B', '08', '08', '31', '11', '6B', '60', '00', '0B', '39', '41', '35', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["B9", "40", "F9", "49", "B6", "05", "00", "00"],
            ["11", "72", "00", "00", "05", "B6"],
            ["AA", "AA"]
            ),
        ("0x9A78", # Nabnut's House Fall - 4EBEF0
            ['1F', '8B', '08', '08', '31', '11', '6B', '60', '00', '0B', '39', '41', '37', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["BF", "7A", "36", "47", "81", "02", "00", "00"],
            ["11", "72", "00", "00", "02", "81"],
            ["AA", "AA"]
            ),
        ("0x9A90", # Nabnut's Attic Fall - 4EC480
            ['1F', '8B', '08', '08', '31', '11', '6B', '60', '00', '0B', '39', '41', '39', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["95", "62", "EA", "87", "C0", "01", "00", "00"],
            ["11", "72", "00", "00", "01", "C0"],
            ["AA", "AA", "AA", "AA"]
            ),
        ("0x9AB0", # Whipcrack Room Fall - 4ECC50
            ['1F', '8B', '08', '08', '31', '11', '6B', '60', '00', '0B', '39', '41', '42', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["54", "23", "9D", "8D", "9A", "04", "00", "00"],
            ["11", "72", "00", "00", "04", "9A"],
            ["AA", "AA", "AA", "AA", "AA", "AA", "AA"]
            ),
        ],
    "Click Clock Wood - Winter": [
        ("0x99A8", # Winter Main Area - 4E8C88
            ['1F', '8B', '08', '08', '95', '13', '6B', '60', '00', '0B', '39', '39', '41', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["2B", "FA", "EB", "0D", "BB", "29", "00", "00"],
            ["11", "72", "00", "00", "29", "BB"],
            ["AA", "AA", "AA", "AA", "AA", "AA"]
            ),
        ("0x99E0", # Mumbo Skull Winter - 4EAA18
            ['1F', '8B', '08', '08', '95', '13', '6B', '60', '00', '0B', '39', '39', '45', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["FF", "F3", "79", "F6", "37", "04", "00", "00"],
            ["11", "72", "00", "00", "04", "37"],
            ["AA", "AA", "AA"]
            ),
        ("0x9A80", # Nabnut's House Winter - 4EC0A8
            ['1F', '8B', '08', '08', '95', '13', '6B', '60', '00', '0B', '39', '41', '38', '30', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["FE", "53", "2E", "B3", "8A", "02", "00", "00"],
            ["11", "72", "00", "00", "02", "8A"],
            ["AA", "AA", "AA", "AA", "AA", "AA"]
            ),
        ("0x9A88", # Nabnut's Attic Winter 1 (Nuts) - 4EC278
            ['1F', '8B', '08', '08', '95', '13', '6B', '60', '00', '0B', '39', '41', '38', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["ED", "AC", "14", "22", "61", "03", "00", "00"],
            ["11", "72", "00", "00", "03", "61"],
            ["AA"]
            ),
        ("0x9A98", # Nabnut's Attic Winter 2 (Water) - 4EC5A8
            ['1F', '8B', '08', '08', '95', '13', '6B', '60', '00', '0B', '39', '41', '39', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["81", "F5", "6E", "02", "AA", "02", "00", "00"],
            ["11", "72", "00", "00", "02", "AA"],
            ["AA", "AA", "AA", "AA", "AA", "AA", "AA"]
            ),
        ("0x9AB8", # Whipcrack Room Winter - 4ECEA0
            ['1F', '8B', '08', '08', '95', '13', '6B', '60', '00', '0B', '39', '41', '42', '38', '2D', '44', '65', '63', '6F', '6D', '70', '72', '65', '73', '73', '65', '64', '2E', '62', '69', '6E', '00'],
            ["E2", "68", "BC", "F9", "8B", "04", "00", "00"],
            ["11", "72", "00", "00", "04", "8B"],
            ["AA", "AA", "AA", "AA", "AA"]
            ),
        ],
#     "Gruntilda's Lair": [
#         ("0x9AC0", # Floor 1 MM Puzzle And Entrance - 4ED0E8
#             [],
#             [],
#             [],
#             []
#             ),
#         ("0x9AC8", # Floor 2 TTC and CC Puzzles - 4ED9F8
#             [],
#             [],
#             [],
#             []
#             ),
#         ("0x9AD0", # Floor 3 CCW Puzzle - 4EDFD8
#             [],
#             [],
#             [],
#             []
#             ),
#         ("0x9B00", # Floor 4 Giant Gruntilda Statue - 4F0EC8
#             [],
#             [],
#             [],
#             []
#             ),
#         ("0x9AE8", # Floor 5 Giant Urn and GV Entrance - 4EF088
#             [],
#             [],
#             [],
#             []
#             ),
#         ("0x9AF0", # Floor 6 Grunty's Head and FP Entrance - 4EF998
#             [],
#             [],
#             [],
#             []
#             ),
#         ("0x9B40", # Floor 7 CCW Entrance - 4F4348
#             [],
#             [],
#             [],
#             []
#             ),
#         ("0x9C10", # Floor 8 Gruntilda Puzzle And Dingpot - 4FBEB0
#             [],
#             [],
#             [],
#             []
#             ),
#         ("0x9AD8", # Floor 3 Pipe Room - 4EE738
#             [],
#             [],
#             [],
#             []
#             ),
#         ("0x9AE0", # TTC Entrance - 4EEAA8
#             [],
#             [],
#             [],
#             []
#             ),
#         ("0x9AF8", # CC Entrance - 4F0758
#             [],
#             [],
#             [],
#             []
#             ),
#         ("0x9B08", # BGS Entrance - 4F15A0
#             [],
#             [],
#             [],
#             []
#             ),
#         ("0x9B18", # GV Puzzle - 4F2180
#             [],
#             [],
#             [],
#             []
#             ),
#         ("0x9B20", # MMM Entrance - 4F26A0
#             [],
#             [],
#             [],
#             []
#             ),
#         ("0x9B28", # Floor 6 Water Switch Area - 4F2CE8
#             [],
#             [],
#             [],
#             []
#             ),
#         ("0x9B30", # RBB Entrance - 4F32B0
#             [],
#             [],
#             [],
#             []
#             ),
#         ("0x9B38", # MMM and RBB Puzzles - 4F3B10
#             [],
#             [],
#             [],
#             []
#             ),
#         ("0x9B48", # Coffin Room - 4F4D00
#             [],
#             [],
#             [],
#             []
#             ),
#         ("0x9B78", # Path To Quiz Show - 4F6700
#             [],
#             [],
#             [],
#             []
#             ),
#         ("0x9BE8", # Furnace Fun - 4FA390
#             [],
#             [],
#             [],
#             []
#             ),
#         ("0x9BF8", # Gruntilda Boss Fight - 4FB1C0
#             [],
#             [],
#             [],
#             []
#             ),
#         ]
    }

###################################################################################
##################################### ID LIST #####################################
###################################################################################

jiggy_flag_list = [
    1, 2, 5, 6, # Mumbo's Mountain
    ]

obj_flagged_id_list = [
    "002D", # Mumbo Token
    "0046", # Jiggy
    "0047", # Empty Honeycomb
    ]

obj_no_flag_id_list = [
    "0029", # Orange
    "0049", # 1-Up
    "005E", # Yellow Jinjo
    "005F", # Orange Jinjo
    "0060", # Blue Jinjo
    "0061", # Purple Jinjo
    "0062", # Green Jinjo
    "002A", # Blubber's Gold
    "01ED", # Blue Present
    "01EF", # Green Present
    "01F1", # Red Present
#     "02A2", # Caterpiller
    "02A9", # Acorn
    # Sometimes Structs
#     "0052", # Egg
#     "0129", # Red Feather
#     "0370", # Gold Feather
    ]

collectable_struct_id_list = [
    "164000B4", # Note B4
    "164000B5", # Note B5
    "164000B6", # Note B6
    "164000B7", # Note B7
    "165000A0", # Blue Egg A0
    "165000A2", # Blue Egg A2
#     "00E000DC", # Red Feather DC Potentially Required Feather Placements?
    "00E000DD", # Red Feather DD
    "00E000DE", # Red Feather DE
#     "15F000DC", # Gold Feather DC Potentially Required Feather Placements?
    "15F000DE", # Gold Feather DE
    "15F000DF", # Gold Feather DF
    ]

enemy_id_dict = {
    "Global": {
        "Ground": [
#             "0004", # Bull
            "0005", # Ticker
            "0012", # Beehive
            "0067", # Snippet
            "00C7", # RIP Tombstone
            #"00F5", # Mutant Snippet
#             "0124", # Snowman
            "034E", # Skeleton
            "034F", # Mummy
            "0350", # Sea Grublin
            "037D", # Ice Cube
            ],
        "Wall": [
            "013B", # Floatsam
            "01CC", # Chompa
            "029F", # Big Clucker
            ],
        "Flying": [
            "0380", # Beetle
            ],
        "Water": [
#             "000A", # Piranha Fish
#             "0068", # Snacker
            ],
        "Whipcracks": [
#             "030F", # Whipcrack
#             "028A", # Underwater Whipcrack
            ],
        "Anywhere": [
            "0056", # Shrapnel
            "00CA", # Tee-Hee
            #"03C1", # Purple Tee-Hee
            ],
        },
    "Gruntilda's Lair": {
        "Ground": [
            "0367", # Gruntling
            "03BF", # Gruntling 2
            "03C0", # Gruntling 3
            ],
        "Flying": [
            "0134", # Dragon Fly
            ],
        },
    "Spiral Mountain": {
        "Ground": [
            "036E", # Bawl
            "036F", # Topper
            ],
        "Flying": [
            "036D", # Coliwobble
            ],
        },
    "Mumbo's Mountain": {
        "Ground": [
            "0067", # Grublin
            ],
        },
    "Treasure Trove Cove": {
        "Ground": [
            "0069", # Yum Yum
            #"00F2", # Black Snippet
#             "0124", # Snowman
            #"0152", # Lockup
            ],
        },
    "Clanker's Cavern": {
        "Ground": [
            ],
        },
    "Bubblegloop Swamp": {
        "Ground": [
            "0133", # Flibbit
            #"0137", # Gold Flibbit
            ],
        "Flying": [
            "0134", # Dragon Fly
            ],
        },
    "Freezeezy Peak": {
        "Ground": [
            ],
        },
    "Gobi's Valley": {
        "Ground": [
            "0120", # Slappa
#             "0124", # Snowman
            ],
        },
    "Mad Monster Mansion": {
        "Wall": [
            "0381", # Portrait Chompa
            ],
        "Flying": [
            "0163", # Bat
            ],
        },
    "Rusty Bucket Bay": {
        "Ground": [
            #"02A4", # TNT 1 (Provide 1-up)
            "030D", # TNT 2 (Seen Out In Open)
            ],
        },
    "Click Clock Wood - Lobby": {
        "Ground": [
#             "01E9", # Venus Flytrap
            "0375", # Grublin Hood
            ],
        "Flying": [
            "0134", # Dragon Fly
            #"029C", # Attacking Zubba
            ],
        },
    "Click Clock Wood - Spring": {
        "Ground": [
#             "01E9", # Venus Flytrap
            "0375", # Grublin Hood
            ],
        "Flying": [
            "0134", # Dragon Fly
            #"029C", # Attacking Zubba
            ],
        },
    "Click Clock Wood - Summer": {
        "Ground": [
#             "01E9", # Venus Flytrap
            "0375", # Grublin Hood
            ],
        "Flying": [
            "0134", # Dragon Fly
            #"029C", # Attacking Zubba
            ],
        },
    "Click Clock Wood - Fall": {
        "Ground": [
#             "01E9", # Venus Flytrap
            "0375", # Grublin Hood
            ],
        "Flying": [
            "0134", # Dragon Fly
            #"029C", # Attacking Zubba
            ],
        },
    "Click Clock Wood - Winter": {
        "Ground": [
#             "0124", # Snowman
#             "01E9", # Venus Flytrap
            "0375", # Grublin Hood
            ],
        "Flying": [
            "0134", # Dragon Fly
            #"029C", # Attacking Zubba
            ],
        },
    }

#####################################################################################
##################################### FUNCTIONS #####################################
#####################################################################################

###########################
### DEVELOPER FUNCITONS ###
###########################

def dev_decompressor(file_dir, rom_file):
    """Extracts a chunk of hex values from the main ROM file into a new file and prepares the new file for decompression by providing the correct header and footer"""
    logger.info("Decompressor")
    # Get File Bytes
    file_bytes = get_file_bytes(file_dir, rom_file)
    address_dict = {}
    address_translator = {}
    for location_name in setup_ids:
        address_list = []
        for (addr, header, footer, lead, tail) in setup_ids[location_name]:
            # Get Address Endpoints
            (address1, address2) = get_address_endpoints(file_bytes, addr)
            verify_original_header(file_bytes, address1)
            # Write Compressed File
            compressed_file = (str(addr)[2:]).upper()
            print(addr, compressed_file)
            address_translator[addr] = compressed_file
            with open(file_dir + tmp_folder + compressed_file + "-Compressed.bin", "w+b") as comp_file:
                # Grab Middle
                for index in range(address1, address2):
                    hex_string = str(hex(file_bytes[index]))[2:]
                    if(len(hex_string) < 2):
                        hex_string = "0" + hex_string
                    comp_file.write(bytes.fromhex(hex_string))
            # Decompress File
            #decompress_file(file_dir, compressed_file)
            address_list.append(compressed_file)
        address_dict[location_name] = address_list
    return (address_dict, address_translator)

header_table = {
    "Spiral Mountain": ["3E", "FE"],
    "Mumbo's Mountain": ["37", "FC"],
    "Treasure Trove Cove": ["B5", "01"],
    "Clanker's Cavern": ["45", "6A"],
    "Bubblegloop Swamp": ["23", "32"],
    "Freezeezy Peak": ["9C", "36"],
    "Gobi's Valley": ["AF", "39"],
    "Mad Monster Mansion": ["84", "3F"],
    "Rusty Bucket Bay": ["42", "6C"],
    "Click Clock Wood - Lobby": ["27", "FC"],
    "Click Clock Wood - Spring": ["27", "FC"],
    "Click Clock Wood - Summer": ["D6", "0D"],
    "Click Clock Wood - Fall": ["31", "11"],
    "Click Clock Wood - Winter": ["95", "13"]
    }

def print_header(file_dir, rom_file):
    """Extracts a chunk of hex values from the main ROM file into a new file and prepares the new file for decompression by providing the correct header and footer"""
    logger.info("Decompressor")
    # Get File Bytes
    file_bytes = get_file_bytes(file_dir, rom_file)
    address_dict = {}
    address_translator = {}
    for location_name in setup_ids:
        address_list = []
        for (addr, header, footer, lead, tail) in setup_ids[location_name]:
            # Get Address Endpoints
            (address1, address2) = get_address_endpoints(file_bytes, addr)
            verify_original_header(file_bytes, address1)
            # Write Compressed File
            compressed_file = (str(addr)[2:]).upper()
            ascii_name = ""
            for letter in compressed_file:
                converted_string = str(binascii.hexlify(letter.encode()))
                converted_string = converted_string.replace("b", "")
                ascii_name += ", " + converted_string
            extension_string = ""
            for letter in "-Decompressed.bin":
                converted_string = str(binascii.hexlify(letter.encode()))
                converted_string = converted_string.replace("b", "")
                extension_string += ", " + converted_string.upper()
            val_1 = header_table[location_name][0]
            val_2 = header_table[location_name][1]
            new_header = "            ['1F', '8B', '08', '08', '" + val_1 + "', '" + val_2 + "', '6B', '60', '00', '0B'" + ascii_name + extension_string + ", '00'],"
            print(addr)
            print(new_header)
    return []

def dev_compress_folder(file_dir):
    """Compresses the hex file that was extracted from the main ROM file"""
    decompressed_file_list = os.listdir(file_dir + tmp_folder)
    for decompressed_file in decompressed_file_list:
        if(decompressed_file.endswith("-Compressed.bin")):
            file_name = decompressed_file.split("-")[0]
            bin_file = file_name + ".bin"
            shutil.copyfile(file_dir + "Examples/" + bin_file, file_dir + "Test/" + file_name + "-Decompressed.bin")
            cmd = file_dir + "GZIP.EXE -c " + file_dir + "Test/" + file_name.upper() + "-Decompressed.bin > " + file_dir + "Test/" + file_name.upper() + "-Compressed.bin"
            logger.debug(cmd)
            os.system(cmd)

######################
### MISC FUNCTIONS ###
######################

def leading_zeros(num_string, num_of_digits):
    '''Adds leading zeros to a string that's supposed to be a certain number of digits in length'''
    if(num_of_digits <= len(num_string)):
        return num_string
    for add_zero in range(num_of_digits - len(num_string)):
        num_string = "0" + num_string
    return num_string

##############
### SET UP ###
##############

def split_dir_rom(rom_dir):
    '''Separates the directory to the rom with the name of the rom'''
    logger.info("Split Dir Rom")
    if("\\" in rom_dir):
        rom_file = rom_dir.split("\\")[-1]
    elif("/" in rom_dir):
        rom_file = rom_dir.split("/")[-1]
    else:
        logger.info("File Directory Unfamiliar Format?")
        logger.warning("File Directory Unfamiliar Format?")
    file_dir = rom_dir.replace(rom_file, "")
    return (file_dir, rom_file)

def setup_tmp_folder(file_dir):
    """Creates temporary folder that'll be used to store bin files and the randomized ROM."""
    logger.info("Set Up Temporary Folder")
    if(not os.path.isdir(file_dir + tmp_folder)):
        os.mkdir(file_dir + tmp_folder)
    else:
        for filename in os.listdir(file_dir + tmp_folder):
            file_path = os.path.join(file_dir + tmp_folder, filename)
            try:
                if(os.path.isfile(file_path) or os.path.islink(file_path)):
                    os.unlink(file_path)
                elif(os.path.isdir(file_path)):
                    shutil.rmtree(file_path)
            except Exception as e:
                logger.error('Failed to delete %s. Reason: %s' % (file_path, e))

def seed(seed_val=None):
    """If seed was not provided, generates a seed value."""
    logger.info("Generate Seed")
    if((seed_val == None) or (seed_val == "")):
        seed_val = random.randint(10000000, 19940303)
    logger.debug("Seed: " + str(seed_val))
    return seed_val

def make_copy_of_rom(seed_val, file_dir, rom_file):
    """Creates a copy of the rom that will be used for randomization"""
    logger.info("Make Copy Of Rom")
    randomized_rom_file = file_dir + tmp_folder + "Banjo-Kazooie_Randomized_Seed_" + str(seed_val) + ".z64"
    shutil.copyfile(file_dir + rom_file, randomized_rom_file)

########################
### Parameter Window ###
########################

def verify_dir(rom_dir):
    '''Checks if ROM file ends in .z64 and is located in the folder with GZIP.EXE'''
    if(rom_dir == ""):
        error_msg = "Please provide the directory to the ROM."
        logger.error(error_msg)
        error_window(error_msg)
        return False
    (file_dir, rom_file) = split_dir_rom(rom_dir)
    if(" " in file_dir):
        error_msg = "There's a space in the directory path. Please remove that and try again."
        logger.error(error_msg)
        error_window(error_msg)
        return False
    rom_ext = rom_file.split(".")[-1]
    if(rom_ext != "z64"):
        error_msg = "Rom Extention is not allowed: " + rom_ext
        logger.error(error_msg)
        error_window(error_msg)
        return False
    gzip_location = file_dir + "GZIP.EXE"
    if(not os.path.exists(gzip_location)):
        error_msg = "GZIP.EXE Is Not In Folder"
        logger.error(error_msg)
        error_window(error_msg)
        return False
    rcr_location = file_dir + "rn64crc2/rn64crc.exe"
    if(not os.path.exists(rcr_location)):
        error_msg = "CRC Tool Is Not In Folder"
        logger.error(error_msg)
        error_window(error_msg)
        return False
    return True

def verify_seed_val(seed_val):
    '''Verifies the seed value is either blank or only consists of digits'''
    if((not seed_val.isdigit()) and (seed_val != "")):
        error_msg = "Seed value is not allowed: '" + seed_val + "'"
        logger.error(error_msg)
        error_window(error_msg)
        return False
    return True

def error_window(error_msg):
    '''Brings up a GUI that displays an error message'''
    window = tk.Tk()
    window.geometry('400x50')
    # Title
    window.winfo_toplevel().title("Banjo Kazooie Randomizer")
    error_label = tk.Label(window, text=error_msg)
    error_label.config(anchor='center')
    error_label.pack()
    ok_btn = tk.Button(window, text='Doh!', command=window.destroy)
    ok_btn.config(anchor='center')
    ok_btn.pack()
    window.mainloop()

def parameter_gui():
    '''Creates a GUI where users give the directory of the ROM file, select options for the randomization, and optionally provide a seed value'''
    def verify_parameters():
        '''Runs verification functions for the ROM and the seed values given'''
        rom_gzip_bool = verify_dir(rom_file_entry.get())
        seed_bool = verify_seed_val(seed_var.get())
        if(rom_gzip_bool and seed_bool):
            window.destroy()
    
    def UploadAction():
        '''Opens a browser to select the ROM file ending in .z64'''
        cwd = os.getcwd()
        filename = tkinter.filedialog.askopenfilename(initialdir=cwd, title="Select A File", filetype =(("Rom Files","*.z64"),("all files","*.*")) )
        rom_file_entry.set(filename)
    
    window = tk.Tk()
    window.geometry('575x250')
    # Title
    window.winfo_toplevel().title("Banjo Kazooie Randomizer")
    # Select Rom File
    select_rom_button = tk.Button(window, text='Select Rom', command=UploadAction)
    select_rom_button.grid(row=0, column=0)
    rom_file_entry = tk.StringVar()
    rom_file_entry.set(default_options["Rom"])
    entry = tk.Entry(textvariable=rom_file_entry, state='readonly', width=50)
    entry.grid(row=1, column=0)
    # Seed Label And Entry
    seed_label = tk.Label(window, text='Would you like to insert a seed?')
    seed_label.grid(row=2, column=0)
    seed_var = tk.StringVar()
    seed_var.set("")
    seed_entry = tk.Entry(window, textvariable=seed_var)
    seed_entry.grid(row=3, column=0)
    # Select Rom
    # Radio Buttons For Non-Flag Object Options
    nf_obj_label = tk.Label(window, text='How Would You Like The Non-Flag Objects Randomized?')
    nf_obj_label.grid(row=4, column=0)
    nf_obj_var = tk.StringVar(window, default_options["Non-Flag"])
    nf_obj_options = {
        "None": "1",
        "Within World": "2",
        #"Completely": "3"
        }
    for (text, value) in nf_obj_options.items():
        nf_obj_select = tk.Radiobutton(window, text=text, variable=nf_obj_var, value=value, indicator=0)
        nf_obj_select.grid(row=4, column=value)
    # Radio Buttons For Flagged Objects Options
    f_obj_label = tk.Label(window, text='How Would You Like The Flagged Objects Randomized?')
    f_obj_label.grid(row=5, column=0)
    f_obj_var = tk.StringVar(window, default_options["Flagged"])
    f_obj_options = {
        "None": "1",
        #"Within World": "2",
        #"Completely": "3"
        }
    for (text, value) in f_obj_options.items():
        f_obj_select = tk.Radiobutton(window, text=text, variable=f_obj_var, value=value, indicator=0)
        f_obj_select.grid(row=5, column=value)
    # Radio Buttons For Struct Options
    struct_label = tk.Label(window, text='How Would You Like The Notes/Eggs/Feathers Randomized?')
    struct_label.grid(row=6, column=0)
    struct_var = tk.StringVar(window, default_options["Struct"])
    struct_options = {
        "None": "1",
        "Within World": "2",
        #"Completely": "3"
        }
    for (text, value) in struct_options.items():
        struct_select = tk.Radiobutton(window, text=text, variable=struct_var, value=value, indicator=0)
        struct_select.grid(row=6, column=value)
    # Radio Buttons For Enemy Options
    enemy_label = tk.Label(window, text='How Would You Like The Enemies Randomized?')
    enemy_label.grid(row=7, column=0)
    enemy_var = tk.StringVar(window, default_options["Enemies"])
    enemy_options = {
        "None": "1",
        "Within World": "2",
        "Completely (Beta)": "3"
        }
    for (text, value) in enemy_options.items():
        enemy_select = tk.Radiobutton(window, text=text, variable=enemy_var, value=value, indicator=0)
        enemy_select.grid(row=7, column=value)
    # Button To Start Randomization
    start_label = tk.Label(window, text='Once finished, click submit!')
    start_label.grid(row=8, column=0)
    sub_btn = tk.Button(window, text='Submit', command=verify_parameters)
    sub_btn.grid(row=9, column=0)
    
    window.mainloop()
    try:
        seed_val = int(seed_var.get())
    except ValueError:
        logger.debug("No Seed Value Was Given")
        seed_val = ""
    return (rom_file_entry.get(), seed_val, str(nf_obj_var.get()), str(f_obj_var.get()), str(struct_var.get()), str(enemy_var.get()))

#####################
### Decompression ###
#####################

def get_file_bytes(file_dir, read_file):
    """Reads the contents of a hex file without using mmap"""
    logger.info("Get File Bytes")
    with open(file_dir + read_file, "rb") as file:
        file_bytes = file.read()
    return file_bytes

def get_address_endpoints(file_bytes, addr):
    """Goes to address (found in Banjo's Backpack) and address 8 bytes after to find the start and end of a setup file"""
    logger.info("Get Address Endpoints")
    byte_list = []
    for byte_num in range(16):
        byte_val = str(hex(file_bytes[int(addr, 16) + byte_num])[2:])
        if(len(str(byte_val)) < 2):
            byte_val = "0" + byte_val
        byte_list.append(byte_val)
    address1 = int("0x" + byte_list[0] + byte_list[1] + byte_list[2] + byte_list[3], 16) + int("0x10CD0", 16)
    address2 = int("0x" + byte_list[8] + byte_list[9] + byte_list[10] + byte_list[11], 16) + int("0x10CD0", 16)
    logger.debug("Address Start: " + str(hex(address1)))
    logger.debug("Address End: " + str(hex(address2)))
    return (address1, address2)

def verify_original_header(file_bytes, address):
    """Verifies the start of an address by looking for 11 72 00 00"""
    logger.info("Verify Original Header")
    if((file_bytes[address] != 17) or (file_bytes[address+1] != 114) or (file_bytes[address+2] != 0) or (file_bytes[address+3] != 0)):
        logger.error("Does Not Start With 11 72 00 00")
        error_window("Error During Randomization")
        exit(0)

def decompress_file(file_dir, compressed_file):
    """Decompresses the hex file that was extracted from the main ROM file"""
    logger.info("Decompress File")
    cmd = file_dir + "GZIP.EXE -dc " + file_dir + tmp_folder + compressed_file.upper() + "-Compressed.bin > " + file_dir + tmp_folder + compressed_file.upper() + "-Decompressed.bin"
#     logger.debug(cmd)
    os.system(cmd)

def decompressor(file_dir, rom_file):
    """Extracts a chunk of hex values from the main ROM file into a new file and prepares the new file for decompression by providing the correct header and footer"""
    logger.info("Decompressor")
    # Get File Bytes
    file_bytes = get_file_bytes(file_dir, rom_file)
    address_dict = {}
    for location_name in setup_ids:
        address_list = []
        for (addr, header, footer, lead, tail) in setup_ids[location_name]:
            # Get Address Endpoints
            (address1, address2) = get_address_endpoints(file_bytes, addr)
            verify_original_header(file_bytes, address1)
            # Write Compressed File
            file_pointer = addr[2:]
            with open(file_dir + tmp_folder + file_pointer + "-Compressed.bin", "w+b") as comp_file:
                # Write Header
                for hex_val in header:
                    comp_file.write(bytes.fromhex(hex_val))
                # Grab Middle
#                 for index in range(address1+len(lead), address2-len(tail)):
                for index in range(address1+6, address2-len(tail)):
                    hex_string = str(hex(file_bytes[index]))[2:]
                    if(len(hex_string) < 2):
                        hex_string = "0" + hex_string
                    comp_file.write(bytes.fromhex(hex_string))
                # Write Footer
                for hex_val in footer:
                    comp_file.write(bytes.fromhex(hex_val))
            # Decompress File
            decompress_file(file_dir, file_pointer)
            address_list.append(file_pointer)
        address_dict[location_name] = address_list
    return address_dict

###################
### Compression ###
###################

def verify_pointers(seed_val, file_dir, setup_dict):
    with open(file_dir + tmp_folder + "Banjo-Kazooie_Randomized_Seed_" + str(seed_val) + ".z64", "r+b") as rand_rom:
        mm_rand_rom = mmap.mmap(rand_rom.fileno(), 0)
#         for file_pointer in range(24200, 68816): # 5E88 to 10CD0, which would be every pointer
        logger.debug("Modified Pointer List")
        for file_pointer in setup_dict:
            pointer_start_1 = str(hex(mm_rand_rom[file_pointer]))[2:]
            pointer_start_1 = leading_zeros(pointer_start_1, 2)
            pointer_start_2 = str(hex(mm_rand_rom[file_pointer + 1]))[2:]
            pointer_start_2 = leading_zeros(pointer_start_2, 2)
            pointer_start_3 = str(hex(mm_rand_rom[file_pointer + 2]))[2:]
            pointer_start_3 = leading_zeros(pointer_start_3, 2)
            pointer_start_4 = str(hex(mm_rand_rom[file_pointer + 3]))[2:]
            pointer_start_4 = leading_zeros(pointer_start_4, 2)
            pointer_start = int(pointer_start_1 + pointer_start_2 + pointer_start_3 + pointer_start_4, 16)
            header_start = pointer_start + 68816 # decimal 68816 -> hex 10CD0
            if((mm_rand_rom[header_start] != 17) or (mm_rand_rom[header_start + 1] != 114)):
                logger.error("Invalid Header At Hex Index: " + str(hex(file_pointer)))
                error_window("Bad Seed (" + str(seed_val) + "), Try Another")
                exit(0)
        other_pointer_list = [
            # SM-Banjo's House, GL-Furnace Fun, GL-Gruntilda Boss Area,
            39896, 39912, 39928,
            # CS-N Cube, CS-Intro, CS-Game Select
            39024, 39016, 39936,
            ]
        logger.debug("Misc Pointer List")
        for file_pointer in other_pointer_list:
            pointer_start_1 = str(hex(mm_rand_rom[file_pointer]))[2:]
            pointer_start_1 = leading_zeros(pointer_start_1, 2)
            pointer_start_2 = str(hex(mm_rand_rom[file_pointer + 1]))[2:]
            pointer_start_2 = leading_zeros(pointer_start_2, 2)
            pointer_start_3 = str(hex(mm_rand_rom[file_pointer + 2]))[2:]
            pointer_start_3 = leading_zeros(pointer_start_3, 2)
            pointer_start_4 = str(hex(mm_rand_rom[file_pointer + 3]))[2:]
            pointer_start_4 = leading_zeros(pointer_start_4, 2)
            pointer_start = int(pointer_start_1 + pointer_start_2 + pointer_start_3 + pointer_start_4, 16)
            header_start = pointer_start + 68816 # decimal 68816 -> hex 10CD0
            if((mm_rand_rom[header_start] != 17) or (mm_rand_rom[header_start + 1] != 114)):
                logger.error("Invalid Header At Decimal Index: " + str(file_pointer))
                error_window("Bad Seed (" + str(seed_val) + "), Try Another")
                exit(0)

def compress_file(file_dir, decompressed_file):
    """Compresses the hex file that was extracted from the main ROM file"""
    logger.info("Compress File")
    cmd = file_dir + "GZIP.EXE -c " + file_dir + tmp_folder + decompressed_file.upper() + "-Decompressed.bin > " + file_dir + tmp_folder + decompressed_file.upper() + "-New_Compressed.bin"
#     logger.debug(cmd)
    os.system(cmd)

def insert_files_into_rom(seed_val, file_dir, addr):
    """Replaces the values of the old ROM with the randomized values"""
    logger.info("Insert Files Into Rom")
    file_bytes = get_file_bytes(file_dir + tmp_folder, "Banjo-Kazooie_Randomized_Seed_" + str(seed_val) + ".z64")
    (address1, address2) = get_address_endpoints(file_bytes, addr)
    file_pointer = addr[2:]
    with open(file_dir + tmp_folder + file_pointer + "-Randomized_Compressed.bin", "rb") as setup_bin:
        setup_content = setup_bin.read()
    with open(file_dir + tmp_folder + "Banjo-Kazooie_Randomized_Seed_" + str(seed_val) + ".z64", "r+b") as rand_rom:
        mm = mmap.mmap(rand_rom.fileno(), 0)
        setup_count = 0
        for index in range(address1, address1 + len(setup_content)):
            mm[index] = setup_content[setup_count]
            setup_count += 1
        for index in range(address1 + len(setup_content) + 1, address2):
            mm[index] = 170

def compressor(seed_val, file_dir, location_setup):
    """Prepares the hex file that was extracted from the main ROM file for compression by providing the correct header and footer"""
    logger.info("Compressor")
    (addr, header, footer, lead, tail) = location_setup
    # Decomp Size
    file_pointer = addr[2:]
    with open(file_dir + tmp_folder + file_pointer + "-Decompressed.bin", "r+b") as rand_comp_file:
        mm_decomp = mmap.mmap(rand_comp_file.fileno(), 0)
        decomp_len = str(hex(len(mm_decomp)))[2:]
        decomp_len = leading_zeros(decomp_len, 8)
    # Compress File
    compress_file(file_dir, file_pointer)
    # Get Length Of Original Compressed File
    with open(file_dir + tmp_folder + file_pointer + "-New_Compressed.bin", "r+b") as comp_file:
        mm_comp = mmap.mmap(comp_file.fileno(), 0)
        comp_file_len = len(mm_comp)
        header_end = ""
        for header_val in header[-4:]:
            header_end += header_val
        header_end_index = mm_comp.find(bytes.fromhex(header_end)) + 4
        with open(file_dir + tmp_folder + file_pointer + "-Randomized_Compressed.bin", "w+b") as new_comp_file:
            new_comp_file.write(bytes.fromhex("1172"))
            new_comp_file.write(bytes.fromhex(decomp_len))
            for index in range(header_end_index, comp_file_len-len(footer)):
                hex_string = str(hex(mm_comp[index]))[2:]
                hex_string = leading_zeros(hex_string, 2)
                new_comp_file.write(bytes.fromhex(hex_string))
#             for hex_val in tail:
#                 new_comp_file.write(bytes.fromhex(hex_val))
    return addr

def affected_pointers(mm_rand_rom, file_pointer, pointer_start, pointer_end):
    '''Finds the pointers that are within the previous pointer range'''
    affected_pointer_list = []
    for index in range(pointer_start, pointer_end):
        pointer_value = leading_zeros(str(hex(index))[2:], 8)
        next_pointer = mm_rand_rom.find(bytes.fromhex(pointer_value), int(file_pointer, 16) + 1, 68816) # Current Pointer to 10CD0
        if(next_pointer != -1):
            affected_pointer_list.append(next_pointer)
            for count in range(2,10):
                next_pointer = mm_rand_rom.find(bytes.fromhex(pointer_value), int(file_pointer, 16) + 8*count, 68816)
                if(next_pointer != -1):
                    affected_pointer_list.append(next_pointer)
                else:
                    break
    return affected_pointer_list

def pointer_update(seed_val, file_dir, file_pointer):
    '''Checks to see if the pointer needs to be updated, and if so, updates it accordingly'''
    logger.info("Updating Pointers")
    with open(file_dir + tmp_folder + file_pointer + "-Randomized_Compressed.bin", "r+b") as rand_comp_file:
        mm_rand_comp = mmap.mmap(rand_comp_file.fileno(), 0)
        mm_rand_comp_len = len(mm_rand_comp)
    with open(file_dir + tmp_folder + "Banjo-Kazooie_Randomized_Seed_" + str(seed_val) + ".z64", "r+b") as rand_rom:
        mm_rand_rom = mmap.mmap(rand_rom.fileno(), 0)
        pointer_start_1 = str(hex(mm_rand_rom[int(file_pointer, 16)]))[2:]
        pointer_start_1 = leading_zeros(pointer_start_1, 2)
        pointer_start_2 = str(hex(mm_rand_rom[int(file_pointer, 16) + 1]))[2:]
        pointer_start_2 = leading_zeros(pointer_start_2, 2)
        pointer_start_3 = str(hex(mm_rand_rom[int(file_pointer, 16) + 2]))[2:]
        pointer_start_3 = leading_zeros(pointer_start_3, 2)
        pointer_start_4 = str(hex(mm_rand_rom[int(file_pointer, 16) + 3]))[2:]
        pointer_start_4 = leading_zeros(pointer_start_4, 2)
        pointer_start = int(pointer_start_1 + pointer_start_2 + pointer_start_3 + pointer_start_4, 16)
        pointer_end_1 = str(hex(mm_rand_rom[int(file_pointer, 16) + 8]))[2:]
        pointer_end_1 = leading_zeros(pointer_end_1, 2)
        pointer_end_2 = str(hex(mm_rand_rom[int(file_pointer, 16) + 9]))[2:]
        pointer_end_2 = leading_zeros(pointer_end_2, 2)
        pointer_end_3 = str(hex(mm_rand_rom[int(file_pointer, 16) + 10]))[2:]
        pointer_end_3 = leading_zeros(pointer_end_3, 2)
        pointer_end_4 = str(hex(mm_rand_rom[int(file_pointer, 16) + 11]))[2:]
        pointer_end_4 = leading_zeros(pointer_end_4, 2)
        pointer_end = int(pointer_end_1 + pointer_end_2 + pointer_end_3 + pointer_end_4, 16)
        rand_section_place = pointer_end - pointer_start
        logger.debug("Pointer Starter: " + str(hex(pointer_start)))
        len_delta = mm_rand_comp_len - rand_section_place
        if(mm_rand_comp_len > rand_section_place):
            logger.debug("Adding Length: " + str(len_delta))
            aa_count = 0
            for index in range(pointer_start - 1, pointer_start-10, -1):
                if(mm_rand_rom[index] == 170):
                    aa_count += 1
                else:
                    break
            logger.debug("AA Count: " + str(aa_count))
            new_pointer_start = str(hex(pointer_start - aa_count))[2:]
            new_pointer_start = leading_zeros(new_pointer_start, 8)
            mm_rand_rom[int(file_pointer, 16)] = int(new_pointer_start[:2], 16)
            mm_rand_rom[int(file_pointer, 16) + 1] = int(new_pointer_start[2:4], 16)
            mm_rand_rom[int(file_pointer, 16) + 2] = int(new_pointer_start[4:6], 16)
            mm_rand_rom[int(file_pointer, 16) + 3] = int(new_pointer_start[6:], 16)
            if(aa_count < len_delta):
                logger.debug("Not Enough Space")
                new_pointer_end = str(hex(pointer_end + len_delta - aa_count))[2:]
                new_pointer_end = leading_zeros(new_pointer_end, 8)
                affected_pointer_list = affected_pointers(mm_rand_rom, file_pointer, pointer_start, pointer_end  + len_delta - aa_count)
                for next_pointer in affected_pointer_list:
                    mm_rand_rom[next_pointer] = int(new_pointer_end[:2], 16)
                    mm_rand_rom[next_pointer + 1] = int(new_pointer_end[2:4], 16)
                    mm_rand_rom[next_pointer + 2] = int(new_pointer_end[4:6], 16)
                    mm_rand_rom[next_pointer + 3] = int(new_pointer_end[6:], 16)
        if(mm_rand_comp_len < rand_section_place):
            logger.debug("Adding Padding: " + str(len_delta))
            for index in range(pointer_end, pointer_start + len_delta):
                mm_rand_rom[index] = 170

def compress_files(seed_val, file_dir):
    """Main function to compress the randomized, decompressed file"""
    logger.info("Compress Files")
    for location in setup_ids:
        for location_setup in setup_ids[location]:
            addr = compressor(seed_val, file_dir, location_setup)
    setup_dict = {}
    for filename in os.listdir(file_dir + tmp_folder):
        if(filename.endswith("-Randomized_Compressed.bin")):
            file_addr = filename.split("-")[0]
            setup_dict[int(file_addr, 16)] = file_addr
    for int_addr in sorted(setup_dict):
        pointer_update(seed_val, file_dir, setup_dict[int_addr])
        insert_files_into_rom(seed_val, file_dir, "0x" + setup_dict[int_addr])
    verify_pointers(seed_val, file_dir, setup_dict)

######################
### GET INDEX LIST ###
######################

def get_jiggy_flags(mm, lead, tail, start_val, end_val):
    '''For Jiggy Flags specifically, grabs a list of flag indices from pre-determined list of Jiggies'''
    flag_dict = []
    for mid_val in range(start_val, end_val): # Middle Value
        if(mid_val in jiggy_flag_list):
            hex_bytes = str(hex(mid_val))[2:]
            hex_bytes = leading_zeros(hex_bytes, 4)
            hex_string = lead + hex_bytes + "0000000000" + tail
            flag_index = mm.find(bytes.fromhex(hex_string))
            if(flag_index != -1):
                flag_dict.append(flag_index - 1)
            else:
    #             logger.warning("Match Not Found For " + str(hex_string))
                pass
    return flag_dict

def get_flags(mm, lead, tail, start_val, end_val):
    '''Grabs a list of flags indices'''
    flag_dict = []
    for mid_val in range(start_val, end_val): # Middle Value
        hex_bytes = str(hex(mid_val))[2:]
        hex_bytes = leading_zeros(hex_bytes, 4)
        hex_string = lead + hex_bytes + "0000000000" + tail
        flag_index = mm.find(bytes.fromhex(hex_string))
        if(flag_index != -1):
            flag_dict.append(flag_index - 1)
        else:
#             logger.warning("Match Not Found For " + str(hex_string))
            pass
    return flag_dict

def get_flag_index_list(mm):
    '''Locates the flags by index in the decompressed file'''
    jiggy_list = []
    empty_honeycomb_list = []
    mumbo_token_list = []
    for lead in ['14', '94']:
        logger.info("Jiggy Flags")
        jiggy_list_part = get_jiggy_flags(mm, lead, "00", 1, 80)
        for item in jiggy_list_part:
            jiggy_list.append(item)
        logger.info("Empty Honeycomb Flags")
        empty_honeycomb_list_part = get_flags(mm, lead, "64", 100, 122)
        for item in empty_honeycomb_list_part:
            empty_honeycomb_list.append(item)
        logger.info("Mumbo Token Flags")
        mumbo_token_list_part = get_flags(mm, lead, "64", 200, 315)
        for item in mumbo_token_list_part:
            mumbo_token_list.append(item)
    return (jiggy_list, empty_honeycomb_list, mumbo_token_list)

def get_object_index_list(mm, object_id, start=0):
    '''Locates the flagged objects by index in the decompressed file'''
    logger.info("Get Flagged Object Index List")
    object_index = mm.find(bytes.fromhex("190C" + object_id), start)
    if(object_index == -1):
        return []
    else:
        new_start = int(object_index) + 1
        object_list = get_object_index_list(mm, object_id, start=new_start)
    object_list.append(object_index)
    return object_list

def adjust_ttc_oob_egg(mm, index):
    obj_id1 = mm[index]
    obj_id2 = mm[index + 1]
    if((obj_id1 == 22) and (obj_id2 == 80)):
        x_loc1 = mm[index - 8]
        x_loc2 = mm[index - 7]
        y_loc1 = mm[index - 6]
        y_loc2 = mm[index - 5]
        z_loc1 = mm[index - 4]
        z_loc2 = mm[index - 3]
        # TTC OoB Blue Egg
        if((x_loc1 == 240) and (x_loc2 == 120) and #F078
           (y_loc1 == 4) and (y_loc2 == 30) and #041E
           (z_loc1 == 6) and (z_loc2 == 214)): #06D6
            print("Editing TTC OoB Blue Egg")
            mm[index - 6] = 4
            mm[index - 5] = 166

def get_struct_index_list(mm, struct_id, start=0):
    '''Locates the structs by index in the decompressed file'''
    logger.info("Get Struct Index List")
    struct_index = mm.find(bytes.fromhex(struct_id), start)
    if(struct_index == -1):
        return []
    else:
        new_start = int(struct_index) + 1
        struct_list = get_struct_index_list(mm, struct_id, start=new_start)
    adjust_ttc_oob_egg(mm, struct_index)
    struct_list.append(struct_index)
    return struct_list

def skip_ttc_grublin(mm, index):
    obj_id1 = mm[index]
    obj_id2 = mm[index + 1]
    if((obj_id1 == 0) and (obj_id2 == 6)):
        x_loc1 = mm[index - 8]
        x_loc2 = mm[index - 7]
        y_loc1 = mm[index - 6]
        y_loc2 = mm[index - 5]
        z_loc1 = mm[index - 4]
        z_loc2 = mm[index - 3]
        # TTC Grublin
        if((x_loc1 == 4) and (x_loc2 == 238) and #04EE
           (y_loc1 == 20) and (y_loc2 == 97) and #1461
           (z_loc1 == 241) and (z_loc2 == 246)): #F1F6
            print("Editing TTC OoB Blue Egg")
            return False
    return True

def get_enemy_index_list(mm, enemy_id, start=0):
    '''Locates the enemies by index in the decompressed file'''
    logger.info("Get Enemy Index List")
    enemy_index = mm.find(bytes.fromhex("190C" + enemy_id), start)
    if(enemy_index == -1):
        return []
    else:
        new_start = int(enemy_index) + 1
        enemy_list = get_enemy_index_list(mm, enemy_id, start=new_start)
    if(skip_ttc_grublin(mm, enemy_index)):
        enemy_list.append(enemy_index)
    return enemy_list

########################
### OBTAIN LIST INFO ###
########################

def obtain_flag_list_info(mm, flag_index_list):
    '''Gathers all of the information about the flag into a list'''
    logger.info("Obtain Flag List Info")
    #X-Loc  Y-Loc  Z-Loc  script   ID     --   --   --   --   rot.  size  --    --
    #0E48   0153   1998   190C     0049   00   00   00   00   00    64    0C    10
    flag_location_list = []
    for flag_index in flag_index_list:
        flag_dict = {}
        flag_dict["Index"] = flag_index
        hex_x1 = leading_zeros(str(hex(mm[flag_index - 6]))[2:].upper(), 2)
        hex_x2 = leading_zeros(str(hex(mm[flag_index - 5]))[2:].upper(), 2)
        flag_dict["Hex_X"] = hex_x1 + hex_x2
        hex_y1 = leading_zeros(str(hex(mm[flag_index - 4]))[2:].upper(), 2)
        hex_y2 = leading_zeros(str(hex(mm[flag_index - 3]))[2:].upper(), 2)
        flag_dict["Hex_Y"] = hex_y1 + hex_y2
        hex_z1 = leading_zeros(str(hex(mm[flag_index - 2]))[2:].upper(), 2)
        hex_z2 = leading_zeros(str(hex(mm[flag_index - 1]))[2:].upper(), 2)
        flag_dict["Hex_Z"] = hex_z1 + hex_z2
        flag_dict["Script1"] = mm[flag_index]
        flag_dict["Script2"] = mm[flag_index + 1]
        flag_dict["Obj_ID1"] = mm[flag_index + 2]
        flag_dict["Obj_ID2"] = mm[flag_index + 3]
        flag_dict["IDK1"] = mm[flag_index + 4]
        flag_dict["IDK2"] = mm[flag_index + 5]
        flag_dict["IDK3"] = mm[flag_index + 6]
        flag_dict["IDK4"] = mm[flag_index + 7]
        flag_dict["Rotation"] = mm[flag_index + 8]
        flag_dict["Size"] = mm[flag_index + 9]
        flag_dict["IDK5"] = mm[flag_index + 10]
        flag_dict["IDK6"] = mm[flag_index + 11]
        flag_location_list.append(flag_dict)
    return flag_location_list

def obtain_flagged_object_list_info(mm, obj_index_list):
    '''Gathers all of the information about the flagged object into a list'''
    logger.info("Obtain Flagged Object List Info")
    #X-Loc  Y-Loc  Z-Loc  script   ID     --   --   --   --   rot.  size  --    --
    #0E48   0153   1998   190C     0049   00   00   00   00   00    64    0C    10
    object_location_list = []
    for object_index in obj_index_list:
        object_dict = {}
        object_dict["Index"] = object_index
        hex_x1 = leading_zeros(str(hex(mm[object_index - 6]))[2:].upper(), 2)
        hex_x2 = leading_zeros(str(hex(mm[object_index - 5]))[2:].upper(), 2)
        object_dict["Hex_X"] = hex_x1 + hex_x2
        hex_y1 = leading_zeros(str(hex(mm[object_index - 4]))[2:].upper(), 2)
        hex_y2 = leading_zeros(str(hex(mm[object_index - 3]))[2:].upper(), 2)
        object_dict["Hex_Y"] = hex_y1 + hex_y2
        hex_z1 = leading_zeros(str(hex(mm[object_index - 2]))[2:].upper(), 2)
        hex_z2 = leading_zeros(str(hex(mm[object_index - 1]))[2:].upper(), 2)
        object_dict["Hex_Z"] = hex_z1 + hex_z2
        object_dict["Script1"] = mm[object_index]
        object_dict["Script2"] = mm[object_index + 1]
        object_dict["Obj_ID1"] = mm[object_index + 2]
        object_dict["Obj_ID2"] = mm[object_index + 3]
#         object_dict["Rotation"] = mm[object_index + 8]
#         object_dict["Size"] = mm[object_index + 9]
        object_location_list.append(object_dict)
    return object_location_list

def obtain_no_flag_object_list_info(mm, no_flag_obj_index_list):
    '''Gathers all of the information about the non-flag object into a list'''
    logger.info("Obtain Non-Flag Object List Info")
    #X-Loc  Y-Loc  Z-Loc  script   ID     --   --   --   --   rot.  size  --    --
    #0E48   0153   1998   190C     0049   00   00   00   00   00    64    0C    10
    object_location_list = []
    for object_index in no_flag_obj_index_list:
        object_dict = {}
#         object_dict["Hex_X1"] = mm[object_index - 6]
#         object_dict["Hex_X2"] = mm[object_index - 5]
#         object_dict["Hex_Y1"] = mm[object_index - 4]
#         object_dict["Hex_Y2"] = mm[object_index - 3]
#         object_dict["Hex_Z1"] = mm[object_index - 2]
#         object_dict["Hex_Z2"] = mm[object_index - 1]
        object_dict["Script1"] = mm[object_index]
        object_dict["Script2"] = mm[object_index + 1]
        object_dict["Obj_ID1"] = mm[object_index + 2]
        object_dict["Obj_ID2"] = mm[object_index + 3]
#         object_dict["Rotation"] = mm[object_index + 8]
#         object_dict["Size"] = mm[object_index + 9]
        object_location_list.append(object_dict)
    return object_location_list

def obtain_struct_list_info(mm, struct_list_index_list):
    '''Gathers all of the information about the struct into a list'''
    logger.info("Obtain Struct List Info")
    #obj id  ????  x-loc  y-loc  z-loc  size  ??
    #1640    00B6  FA12   03C4   02C2   19    80
    struct_location_list = []
    for struct_index in struct_list_index_list:
        struct_dict = {}
        struct_dict["Index"] = struct_index
        struct_dict["Obj_ID1"] = mm[struct_index]
        struct_dict["Obj_ID2"] = mm[struct_index + 1]
        struct_dict["IDK1"] = mm[struct_index + 2]
        struct_dict["IDK2"] = mm[struct_index + 3]
#         struct_dict["Hex_X1"] = mm[struct_index + 4]
#         struct_dict["Hex_X2"] = mm[struct_index + 5]
#         struct_dict["Hex_Y1"] = mm[struct_index + 6]
#         struct_dict["Hex_Y2"] = mm[struct_index + 7]
#         struct_dict["Hex_Z1"] = mm[struct_index + 8]
#         struct_dict["Hex_Z2"] = mm[struct_index + 9]
#         struct_dict["Size"] = mm[struct_index + 10]
#         struct_dict["IDK3"] = mm[struct_index + 11]
        struct_location_list.append(struct_dict)
    return struct_location_list

def obtain_enemy_list_info(mm, enemy_index_list):
    '''Gathers all of the information about the enemy into a list'''
    logger.info("Obtain Enemy List Info")
    #X-Loc  Y-Loc  Z-Loc  script   ID     --   --   --   --   rot.  size  --    --
    #0E48   0153   1998   190C     0049   00   00   00   00   00    64    0C    10
    enemy_location_list = []
    for enemy_index in enemy_index_list:
        enemy_dict = {}
#         enemy_dict["Hex_X1"] = mm[enemy_index - 6]
#         enemy_dict["Hex_X2"] = mm[enemy_index - 5]
#         enemy_dict["Hex_Y1"] = mm[enemy_index - 4]
#         enemy_dict["Hex_Y2"] = mm[enemy_index - 3]
#         enemy_dict["Hex_Z1"] = mm[enemy_index - 2]
#         enemy_dict["Hex_Z2"] = mm[enemy_index - 1]
#         enemy_dict["Script1"] = mm[enemy_index]
#         enemy_dict["Script2"] = mm[enemy_index + 1]
        enemy_dict["Obj_ID1"] = mm[enemy_index + 2]
        enemy_dict["Obj_ID2"] = mm[enemy_index + 3]
#         enemy_dict["Rotation"] = mm[enemy_index + 8]
#         enemy_dict["Size"] = mm[enemy_index + 9]
        enemy_location_list.append(enemy_dict)
    return enemy_location_list

##################
### INDEX MAIN ###
##################

def create_mmap(file_dir, address):
    '''Creates an mmap that can read and write to a hex file'''
    logger.info("Create MMap")
    with open(file_dir + tmp_folder + address + "-Decompressed.bin", "r+b") as f:
        mm = mmap.mmap(f.fileno(), 0)
    return mm

def enemy_get_lists(mm, location):
    '''For each enemy type, runs the functions that grabs the list of objects and locations'''
    logger.info("Get Enemy Lists: " + location)
    index_dict = {}
    location_dict = {}
    for enemy_type in enemy_id_dict["Global"]:
        index_dict[enemy_type] = []
        location_dict[enemy_type] = []
        for enemy_id in enemy_id_dict["Global"][enemy_type]:
            index_dict[enemy_type] = index_dict[enemy_type] + get_enemy_index_list(mm, enemy_id)
        location_dict[enemy_type] = location_dict[enemy_type] + obtain_enemy_list_info(mm, index_dict[enemy_type])
    for enemy_type in enemy_id_dict[location]:
        for enemy_id in enemy_id_dict[location][enemy_type]:
            index_dict[enemy_type] = index_dict[enemy_type] + get_enemy_index_list(mm, enemy_id)
        location_dict[enemy_type] = location_dict[enemy_type] + obtain_enemy_list_info(mm, index_dict[enemy_type])
    return (index_dict, location_dict)

def generic_get_lists(mm, id_list):
    '''For each type of id list, runs the functions that grabs the list of objects and locations'''
    logger.info("Generic Get Lists")
    index_list = []
    for obj_id in id_list:
        if((id_list == obj_no_flag_id_list) or (id_list == obj_flagged_id_list)):
            object_list = get_object_index_list(mm, obj_id)
        elif(id_list == collectable_struct_id_list):
            object_list = get_struct_index_list(mm, obj_id)
        else:
            logger.error("Invalid ID List")
            error_window("Error During Randomization")
            exit(0)
        for item in object_list:
            index_list.append(item)
    if(id_list == obj_no_flag_id_list):
        location_list = obtain_no_flag_object_list_info(mm, index_list)
    elif(id_list == obj_flagged_id_list):
        location_list = obtain_flagged_object_list_info(mm, index_list)
    elif(id_list == collectable_struct_id_list):
        location_list = obtain_struct_list_info(mm, index_list)
    else:
        logger.error("Invalid ID List")
        error_window("Error During Randomization")
        exit(0)
    return (index_list, location_list)

def find_closest_flag(target_hex_x, target_hex_y, target_hex_z, compiled_list):
    '''For every flagged object, tries to find the closest flag'''
    score_dict = {}
    for item_dict in compiled_list:
        suspect_index = item_dict["Index"]
        suspect_hex_x = item_dict["Hex_X"]
        suspect_hex_y = item_dict["Hex_Y"]
        suspect_hex_z = item_dict["Hex_Z"]
        x_delta = int(str(target_hex_x), 16) - int(str(suspect_hex_x), 16)
        y_delta = int(str(target_hex_y), 16) - int(str(suspect_hex_y), 16)
        z_delta = int(str(target_hex_z), 16) - int(str(suspect_hex_z), 16)
        score = abs(x_delta) + abs(y_delta) + abs(z_delta)
        score_dict[score] = suspect_index
    best_score = min(score_dict.keys())
    return score_dict[best_score]

def match_obj_and_flag(flagged_object_location_list, jiggy_flag_location_list, empty_honeycomb_flag_location_list, mumbo_token_flag_location_list):
    '''Main function for matching flagged objects with their flag'''
    logger.info("Match Object And Flag")
    compiled_list = []
    closest_flag_dict = {}
    for item_dict in jiggy_flag_location_list:
        compiled_list.append(item_dict)
    for item_dict in empty_honeycomb_flag_location_list:
        compiled_list.append(item_dict)
    for item_dict in mumbo_token_flag_location_list:
        compiled_list.append(item_dict)
    for flagged_object_dict in flagged_object_location_list:
        target_hex_x = flagged_object_dict["Hex_X"]
        target_hex_y = flagged_object_dict["Hex_Y"]
        target_hex_z = flagged_object_dict["Hex_Z"]
        closet_flag_index = find_closest_flag(target_hex_x, target_hex_y, target_hex_z, compiled_list)
        closest_flag_dict[flagged_object_dict["Index"]] = closet_flag_index
    return closest_flag_dict

def get_index_main(file_dir, address_dict, seed_val, non_flag_option, flagged_option, struct_option, enemy_option):
    '''For every location, grabs all of the non-flags, flagged, struct, and enemy indices and information, randomizes the lists, and assigns the new values'''
    logger.info("Get Index Main")
    for location in address_dict:
        address_index_dict = {}
        flagged_obj_index_dict = {}
        address_flagged_object_location_list = []
        address_no_flag_object_location_list = []
        address_struct_location_list = []
        address_ground_enemy_location_list = []
        address_flying_enemy_location_list = []
        address_wall_enemy_location_list = []
        location_jiggy_dict = {}
        location_empty_honeycomb_dict = {}
        location_mumbo_token_dict = {}
        for address in address_dict[location]:
            address_index_dict[address] = {}
            flagged_obj_index_dict[address] = {}
            address_index_dict[address]["Grounded_Enemies"] = []
            address_index_dict[address]["Flying_Enemies"] = []
            address_index_dict[address]["Wall_Enemies"] = []
            mm = create_mmap(file_dir, address)
            # Flagged Objects
            if(flagged_option != "1"):
                logger.info("Get Flagged Objects Index")
                (flagged_obj_index_list, flagged_object_location_list) = generic_get_lists(mm, obj_flagged_id_list)
                for item in flagged_object_location_list:
                    address_flagged_object_location_list.append(item)
                address_index_dict[address]["Flagged_Objects"] = flagged_obj_index_list
                logger.info("Get Flag Indices")
                (jiggy_index_list, empty_honeycomb_index_list, mumbo_token_index_list) = get_flag_index_list(mm)
                jiggy_flag_location_list = obtain_flag_list_info(mm, jiggy_index_list)
                empty_honeycomb_flag_location_list = obtain_flag_list_info(mm, empty_honeycomb_index_list)
                mumbo_token_flag_location_list = obtain_flag_list_info(mm, mumbo_token_index_list)
                flagged_obj_index_dict[address]["Closest_Flag"] = match_obj_and_flag(flagged_object_location_list, jiggy_flag_location_list, empty_honeycomb_flag_location_list, mumbo_token_flag_location_list)
                for item in jiggy_flag_location_list:
                    location_jiggy_dict[(address, item["Index"])] = item
                for item in empty_honeycomb_flag_location_list:
                    location_empty_honeycomb_dict[(address, item["Index"])] = item
                for item in mumbo_token_flag_location_list:
                    location_mumbo_token_dict[(address, item["Index"])] = item
            # No Flag Objects
            if(non_flag_option != "1"):
                logger.info("Get Non-Flag Objects Index")
                (no_flag_obj_index_list, no_flag_object_location_list) = generic_get_lists(mm, obj_no_flag_id_list)
                for item in no_flag_object_location_list:
                    address_no_flag_object_location_list.append(item)
                address_index_dict[address]["No_Flag_Objects"] = no_flag_obj_index_list
            # Structs
            if(struct_option != "1"):
                logger.info("Get Structs Index")
                (struct_index_list, struct_location_list) = generic_get_lists(mm, collectable_struct_id_list)
                for item in struct_location_list:
                    address_struct_location_list.append(item)
                address_index_dict[address]["Structs"] = struct_index_list
            if(enemy_option != "1"):
                (index_dict, location_dict) = enemy_get_lists(mm, location)
                # Grounded Enemies
                logger.info("Get Grounded Enemies Index")
                address_index_dict[address]["Grounded_Enemies"] = address_index_dict[address]["Grounded_Enemies"] + index_dict["Ground"]
                address_ground_enemy_location_list = address_ground_enemy_location_list + location_dict["Ground"]
                # Flying Enemies
                logger.info("Get Grounded Enemies Index")
                address_index_dict[address]["Flying_Enemies"] = address_index_dict[address]["Flying_Enemies"] + index_dict["Flying"]
                address_flying_enemy_location_list = address_flying_enemy_location_list + location_dict["Flying"]
                # Wall Enemies
                logger.info("Get Wall Enemies Index")
                address_index_dict[address]["Wall_Enemies"] = address_index_dict[address]["Wall_Enemies"] + index_dict["Wall"]
                address_ground_enemy_location_list = address_wall_enemy_location_list + location_dict["Wall"]

        ### Randomize The Lists
        logger.info("Randomizing Lists Section")
        if(flagged_option != "1"):
            address_flagged_object_location_list = randomize_list(seed_val, address_flagged_object_location_list)
        if(non_flag_option != "1"):
            address_no_flag_object_location_list = randomize_list(seed_val, address_no_flag_object_location_list)
        if(struct_option != "1"):
            address_struct_location_list = randomize_list(seed_val, address_struct_location_list)
        if(enemy_option != "1"):
            address_ground_enemy_location_list = randomize_list(seed_val, address_ground_enemy_location_list)
            address_flying_enemy_location_list = randomize_list(seed_val, address_flying_enemy_location_list)
            address_wall_enemy_location_list = randomize_list(seed_val, address_wall_enemy_location_list)
        
        ### Move Everything
        logger.info("Moving Object/Structs/Enemies Section")
        for address in address_dict[location]:
            logger.debug(address)
            mm = create_mmap(file_dir, address)
            # Flagged Objects
            if(flagged_option == "1"):
                logger.info("Flagged Objects Randomization Off")
            elif(flagged_option == "2"):
                (address_flagged_object_location_list,
                 location_jiggy_dict,
                 location_empty_honeycomb_dict,
                 location_mumbo_token_dict) = move_flagged_objects(mm,
                                                                   address_index_dict[address]["Flagged_Objects"],
                                                                   address_flagged_object_location_list,
                                                                   flagged_obj_index_dict[address]["Closest_Flag"],
                                                                   location_jiggy_dict,
                                                                   location_empty_honeycomb_dict,
                                                                   location_mumbo_token_dict)
            # No Flag Objects
            if(non_flag_option == "1"):
                logger.info("Non-Flag Objects Randomization Off")
            elif(non_flag_option == "2"):
                address_no_flag_object_location_list = move_no_flag_objects(mm, address_index_dict[address]["No_Flag_Objects"], address_no_flag_object_location_list)
            # Structs
            if(struct_option == "1"):
                logger.info("Struct Randomization Off")
            elif(struct_option == "2"):
                address_struct_location_list = move_structs(mm, address_index_dict[address]["Structs"], address_struct_location_list)
            # Enemies
            if(enemy_option == "1"):
                logger.info("Enemy Randomization Off")
            elif(enemy_option == "2"):
                # Grounded Enemies
                address_ground_enemy_location_list = move_local_enemies(mm, address_index_dict[address]["Grounded_Enemies"], address_ground_enemy_location_list)
                # Flying Enemies
                address_flying_enemy_location_list = move_local_enemies(mm, address_index_dict[address]["Flying_Enemies"], address_flying_enemy_location_list)
                # Wall Enemies
                address_wall_enemy_location_list = move_local_enemies(mm, address_index_dict[address]["Wall_Enemies"], address_wall_enemy_location_list)
            elif(enemy_option == "3"):
                # Grounded Enemies
                move_randomized_enemies(mm, seed_val, address_index_dict[address]["Grounded_Enemies"], "Ground", location, address)
                # Flying Enemies
                move_randomized_enemies(mm, seed_val, address_index_dict[address]["Flying_Enemies"], "Flying", location, address)
                # Wall Enemies
                move_randomized_enemies(mm, seed_val, address_index_dict[address]["Wall_Enemies"], "Wall", location, address)

#################
### RANDOMIZE ###
#################

def randomize_list(seed_val, original_list):
    '''Shuffles a given list based on the seed value'''
    logger.info("Randomize List")
    random.seed(a=seed_val)
    random.shuffle(original_list)
    return original_list

def move_flagged_objects(mm, obj_index_list, object_location_list, flag_indices_dict, jiggy_dict, empty_honeycomb_dict, mumbo_token_dict):
    '''For each object, assign it a new script and object id based on randomized list'''
    logger.info("Move Flagged Objects")
    for object_index in obj_index_list:
        mm[object_index] = object_location_list[0]["Script1"]
        mm[object_index + 1] = object_location_list[0]["Script2"]
        mm[object_index + 2] = object_location_list[0]["Obj_ID1"]
        mm[object_index + 3] = object_location_list[0]["Obj_ID2"]
        closest_index = flag_indices_dict[object_index]
        if(object_location_list[0]["Obj_ID2"] == 45): # Mumbo Token
            use_this_flag_key = list(mumbo_token_dict.keys())[0]
            use_this_flag_value = mumbo_token_dict[use_this_flag_key]
            mumbo_token_dict.pop(use_this_flag_key, None)
        elif(object_location_list[0]["Obj_ID2"] == 71): # Empty Honeycomb
            use_this_flag_key = list(empty_honeycomb_dict.keys())[0]
            use_this_flag_value = empty_honeycomb_dict[use_this_flag_key]
            empty_honeycomb_dict.pop(use_this_flag_key, None)
        elif(object_location_list[0]["Obj_ID2"] == 70): # Jiggy
            use_this_flag_key = list(jiggy_dict.keys())[0]
            use_this_flag_value = jiggy_dict[use_this_flag_key]
            jiggy_dict.pop(use_this_flag_key, None)
        mm[closest_index] = use_this_flag_value["Script1"]
        mm[closest_index + 1] = use_this_flag_value["Script2"]
        mm[closest_index + 2] = use_this_flag_value["Obj_ID1"]
        mm[closest_index + 3] = use_this_flag_value["Obj_ID2"]
        mm[closest_index + 4] = use_this_flag_value["IDK1"]
        mm[closest_index + 5] = use_this_flag_value["IDK2"]
        mm[closest_index + 6] = use_this_flag_value["IDK3"]
        mm[closest_index + 7] = use_this_flag_value["IDK4"]
        mm[closest_index + 8] = use_this_flag_value["Rotation"]
        mm[closest_index + 9] = use_this_flag_value["Size"]
        mm[closest_index + 10] = use_this_flag_value["IDK5"]
        mm[closest_index + 11] = use_this_flag_value["IDK6"]
        object_location_list.pop(0)
    return (object_location_list, jiggy_dict, empty_honeycomb_dict, mumbo_token_dict)

def move_no_flag_objects(mm, obj_index_list, object_location_list):
    '''For each object, assign it a new script and object id based on randomized list'''
    logger.info("Move Non-Flag Objects")
    for object_index in obj_index_list:
        mm[object_index] = object_location_list[0]["Script1"]
        mm[object_index + 1] = object_location_list[0]["Script2"]
        mm[object_index + 2] = object_location_list[0]["Obj_ID1"]
        mm[object_index + 3] = object_location_list[0]["Obj_ID2"]
        object_location_list.pop(0)
    return object_location_list

def move_structs(mm, struct_index_list, struct_location_list):
    '''For each struct, assign it a new script and object id based on randomized list'''
    logger.info("Move Local Structs")
    for struct_index in struct_index_list:
        mm[struct_index] = struct_location_list[0]["Obj_ID1"]
        mm[struct_index + 1] = struct_location_list[0]["Obj_ID2"]
#         mm[struct_index + 2] = struct_location_list[0]["IDK1"]
#         mm[struct_index + 3] = struct_location_list[0]["IDK2"]
        mm[struct_index + 2] = 0
        mm[struct_index + 3] = 160
        struct_location_list.pop(0)
    return struct_location_list

def move_local_enemies(mm, enemy_index_list, enemy_location_list):
    '''For each enemy, assign it a new script and object id based on randomized list'''
    logger.info("Move Local Enemies")
    for enemy_index in enemy_index_list:
#         mm[enemy_index] = enemy_location_list[enemy_count]["Script1"]
#         mm[enemy_index + 1] = enemy_location_list[enemy_count]["Script2"]
        mm[enemy_index + 2] = enemy_location_list[0]["Obj_ID1"]
        mm[enemy_index + 3] = enemy_location_list[0]["Obj_ID2"]
        enemy_location_list.pop(0)
    return enemy_location_list

def move_randomized_enemies(mm, seed_val, enemy_index_list, enemy_type, location, address):
    '''For each enemy, randomly assign it a new script and object id within the id list'''
    logger.info("Move Completely Randomized Enemies")
    if(enemy_type in enemy_id_dict[location]):
        enemy_id_list = enemy_id_dict["Global"][enemy_type] + enemy_id_dict[location][enemy_type]
    else:
        enemy_id_list = enemy_id_dict["Global"][enemy_type]
    seed_count = 0
    for enemy_index in enemy_index_list:
        random.seed(a=(seed_val+seed_count+int(address, 16)))
        enemy_obj_id = random.choice(enemy_id_list)
        mm[enemy_index + 2] = int(enemy_obj_id[:2], 16)
        mm[enemy_index + 3] = int(enemy_obj_id[2:], 16)
        seed_count += 1

################
### CRC TOOL ###
################

def run_crc_tool(seed_val, file_dir):
    '''Runs the CRC Tool that allows a modified game to run'''
    logger.info("Running CRC Tool")
    cmd = file_dir + "rn64crc2/rn64crc.exe -u " + file_dir + tmp_folder + "Banjo-Kazooie_Randomized_Seed_" + str(seed_val) + ".z64"
    os.system(cmd)

################
### CLEAN UP ###
################

def remove_bin_files(file_dir):
    """Removes compressed and decompressed bin files created during the randomization"""
    logger.info("Remove Bin Files")
    for filename in os.listdir(file_dir + tmp_folder):
        file_path = os.path.join(file_dir + tmp_folder, filename)
        try:
            if((os.path.isfile(file_path) or os.path.islink(file_path)) and file_path.endswith(".bin")):
                os.unlink(file_path)
            elif(os.path.isdir(file_path)):
                shutil.rmtree(file_path)
        except Exception as e:
            logger.warning('Failed to delete %s. Reason: %s' % (file_path, e))

def done_window(seed_val, file_dir):
    '''Displays a window to inform the user that the randomization is complete'''
    def update(ind):
        '''Updates The Gif Frame'''
        frame = frames[ind]
        ind += 1
        if ind == frameCnt:
            ind = 0
        label.configure(image=frame)
        window.after(15, update, ind)
    window_size = '400x450'
    window = tk.Tk()
    # Title
    window.winfo_toplevel().title("Banjo Kazooie Randomizer")
    # Displays Done
    done_label = tk.Label(window, text='The Randomizer Is Complete! Seed: ' + str(seed_val))
    done_label.config(anchor='center')
    done_label.pack()
    # Final Notes
    notes_label = tk.Label(window, text='For any questions, refer to the ReadMe file!')
    notes_label.config(anchor='center')
    notes_label.pack()
    # GIF Of BK
    try:
        frameCnt = 92
        frames = [tk.PhotoImage(file=(file_dir+"bk_side_taunt.gif"),format = 'gif -index %i' %(i)) for i in range(frameCnt)]
        label = tk.Label(window)
        label.pack()
    except tk.TclError:
        window_size = '300x75'
    # Exit Out Of Window
    ok_btn = tk.Button(window, text='Guh-Huh!', command=window.destroy)
    ok_btn.config(anchor='center')
    ok_btn.pack()
    try:
        window.after(0, update, 0)
    except Exception:
        pass
    window.geometry(window_size)
    window.mainloop()

############
### MAIN ###
############

def main():
    """Goes through the steps of asking for parameters in a gui, setting up the folder, making a copy of the rom, decompressing the addresses, randomizing, compressing the files, and cleaning up"""
    logger.info("Main")
    ### Set Up ###
    (rom_dir, seed_val, non_flag_option, flagged_option, struct_option, enemy_option) = parameter_gui()
    (file_dir, rom_file) = split_dir_rom(rom_dir)
    setup_tmp_folder(file_dir)
    seed_val = seed(seed_val)
    make_copy_of_rom(seed_val, file_dir, rom_file)
    ### Decompress ROM ###
    address_dict = decompressor(file_dir, rom_file)
    ### Randomize Indexes ###
    get_index_main(file_dir, address_dict, seed_val, non_flag_option, flagged_option, struct_option, enemy_option)
    ### Compress ROM ###
    compress_files(seed_val, file_dir)
    ### CRC Tool ###
    run_crc_tool(seed_val, file_dir)
    ### Clean Up ###
    remove_bin_files(file_dir)
    ### Done ###
    done_window(seed_val, file_dir)

##########################################################################################
####################################### TEST CASES #######################################
##########################################################################################

logger.info("########## Start ##########")
main()
logger.info("########## Done ##########")
